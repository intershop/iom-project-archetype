# trigger build for every branch
#trigger:
#- feature/65868-iom-bootstrap-project

pool: 'ubuntu-20.4-DS2_v2-adopt-jdk'
variables:
  M2_LOCAL_REPO: $(Pipeline.Workspace)/local-maven-repo
  MAVEN_OPTS: '-Dmaven.repo.local=$(M2_LOCAL_REPO)'
  #IOM_DOCKERHUB_HOST: intershophub
  #IOM_REPO_NAME: "intershophub/"
  IOM_DOCKERHUB_CONNECTION: release-dockerhub

  # Helm Repo URL
  IOM_HELM_CHART_REPO_URL: git://Products/order-iom-helm
  IOM_HELM_CHART_BRANCH: develop
  IOM_HELM_CHART_PATH: helm
  HELM_RELEASE_NAME: archetype-test-$(Build.BuildId)

  # ACR & AKS
  IOM_CI_ACR_HOST: iomci.azurecr.io
  IOM_CI_ACR_CONNECTION: order-iomci-ISH-ENG-IOM

  IOM_INTERNAL_ACR_HOST: iominternalacr.azurecr.io
  IOM_INTERNAL_ACR_CONNECTION: order-iomInternalACR-ISH-ENG-IOM

  IOM_AKS_SERVICE_ENDPOINT: order-CiAksAutoScaledConnection-ISH-ENG-IOM
  IOM_AKS_NAMESPACE: $(HELM_RELEASE_NAME)

  # wrap environment variables for build_image.sh
  C2D_APP_IMAGE_TAG_FILE: $(Pipeline.Workspace)/app-image-tag.txt
  C2D_APP_IMAGE_NAME_FILE: $(Pipeline.Workspace)/app-image-name.txt
  C2D_CONFIG_IMAGE_TAG_FILE: $(Pipeline.Workspace)/config-image-tag.txt
  C2D_CONFIG_IMAGE_NAME_FILE: $(Pipeline.Workspace)/config-image-name.txt
  # these will be set by a later job step
  C2D_APP_IMAGE_TAG:
  C2D_APP_IMAGE_NAME:
  C2D_CONFIG_IMAGE_TAG:
  C2D_CONFIG_IMAGE_NAME:
  IMAGE_DOCKER_OPTS_APP: >-
    --get-image-name=$(C2D_APP_IMAGE_NAME_FILE)
    --get-image-tag=$(C2D_APP_IMAGE_TAG_FILE)
  IMAGE_DOCKER_OPTS_CONFIG: >-
    --get-image-name=$(C2D_CONFIG_IMAGE_NAME_FILE)
    --get-image-tag=$(C2D_CONFIG_IMAGE_TAG_FILE)
  IMAGE_VERSION: 1.0.0-SNAPSHOT.$(Build.BuildId)
  INTERSHOP_DOCKER_REPO: $(IOM_INTERNAL_ACR_HOST)

  IS_RELEASE_BUILD:

steps:
- script: |
    # stop on any error
    set -e

    echo '##[debug] install tools'
    sudo apt update
    sudo apt install -y maven unzip
  timeoutInMinutes: "3"
  displayName: "Prepare - install tools"
  
- task: HelmInstaller@1
  displayName: "Prepare - install Helm"
  
- checkout: self
  path: s/order-iom-project-archetype
  displayName: "Checkout - order-iom-project-archetype@$(Build.SourceBranchName)"
  timeoutInMinutes: "5"
  persistCredentials: true
  
- checkout: ${{variables.IOM_HELM_CHART_REPO_URL}}@${{variables.IOM_HELM_CHART_BRANCH}}
  path: s/$(IOM_HELM_CHART_PATH)
  displayName: "Checkout - order-iom-helm@$(IOM_HELM_CHART_BRANCH)"
  timeoutInMinutes: "5"

- task: Cache@2
  inputs:
    # according to https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
    # this variable expansion should not work, but it's the only way I got to work.
    key: '"mvn_ipa" | order-iom-project-archetype/pom.xml | order-iom-project-archetype/src/test/resources/projects/basic/archetype.properties'
    restoreKeys: |
      mvn_ipa
    path: "$(M2_LOCAL_REPO)"
    cacheHitVar: M2_REPO_CACHE_HIT
  timeoutInMinutes: 5
  displayName: "Cache - create/restore local maven cache at $(M2_LOCAL_REPO)"
  
- task: DownloadSecureFile@1
  name: pgpPrivateKey
  displayName: 'Secrets - download pgp key'
  inputs:
    secureFile: 'order-iom-project-archetype-gpg_private_key_iom.pgp'

- task: MavenAuthenticate@0
  inputs:
    artifactsFeeds: order-iom-externallibs, order-iom-snapshots, order-iom-releases
  timeoutInMinutes: 1
  displayName: "Maven - authenticate"

- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(IOM_INTERNAL_ACR_CONNECTION)
  timeoutInMinutes: 1
  displayName: "Docker - login to internal ACR"

- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(IOM_CI_ACR_CONNECTION)
  timeoutInMinutes: 1
  displayName: "Docker - login to CI ACR"
  
- script: |
    if mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f order-iom-project-archetype/pom.xml | tail -1 | grep -q -- -SNAPSHOT ; then
      echo "##vso[task.setvariable variable=IS_RELEASE_BUILD;]false"
    else
      echo "##vso[task.setvariable variable=IS_RELEASE_BUILD;]true"
    fi
  displayName: "Read variables - SNAPSHOT or Release build"

- task: Maven@3
  condition: eq(variables.IS_RELEASE_BUILD, 'false')
  inputs:
    goals: clean verify
    mavenPomFile: 'order-iom-project-archetype/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - run verify goal against archetype snapshot"
  env:
    PGP_PASSPHRASE: "literal:$(pgpPassphrase)"
    PGP_SECRETKEY: "keyfile:$(pgpPrivateKey.secureFilePath)"

- task: Maven@3
  condition: eq(variables.IS_RELEASE_BUILD, 'true')
  inputs:
    goals: clean deploy
    mavenPomFile: 'order-iom-project-archetype/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - run deploy goal against archetype release"
  env:
    PGP_PASSPHRASE: "literal:$(pgpPassphrase)"
    PGP_SECRETKEY: "keyfile:$(pgpPrivateKey.secureFilePath)"
    
- task: Maven@3
  inputs:
    goals: clean verify
    mavenPomFile: 'order-iom-project-archetype/target/test-classes/projects/basic/project/blueprint-test/dependency-helper/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - run verify goal against dependency-helper"
# run build_image.sh script from the created archive
- script: |
    # stop on any error
    set -e

    #chmod +x $PIPELINE_WORKSPACE/s/order-iom-project-archetype/target/test-classes/projects/basic/project/blueprint-test/build_image.sh
    #$PIPELINE_WORKSPACE/s/order-iom-project-archetype/target/test-classes/projects/basic/project/blueprint-test/build_image.sh
    docker tag "$(cat $C2D_APP_IMAGE_NAME_FILE):$(cat $C2D_APP_IMAGE_TAG_FILE)" \
    "$IOM_CI_ACR_HOST/$(cat $C2D_APP_IMAGE_NAME_FILE):$(cat $C2D_APP_IMAGE_TAG_FILE)" 
    docker tag "$(cat $C2D_CONFIG_IMAGE_NAME_FILE):$(cat $C2D_CONFIG_IMAGE_TAG_FILE)" \
    "$IOM_CI_ACR_HOST/$(cat $C2D_CONFIG_IMAGE_NAME_FILE):$(cat $C2D_CONFIG_IMAGE_TAG_FILE)" 
    docker push "$IOM_CI_ACR_HOST/$(cat $C2D_APP_IMAGE_NAME_FILE):$(cat $C2D_APP_IMAGE_TAG_FILE)" 
    docker push "$IOM_CI_ACR_HOST/$(cat $C2D_CONFIG_IMAGE_NAME_FILE):$(cat $C2D_CONFIG_IMAGE_TAG_FILE)" 
    # set variables
    echo "##vso[task.setvariable variable=C2D_APP_IMAGE_TAG;]$(cat $C2D_APP_IMAGE_TAG_FILE)"
    echo "##vso[task.setvariable variable=C2D_APP_IMAGE_NAME;]$(cat $C2D_APP_IMAGE_NAME_FILE)"
    echo "##vso[task.setvariable variable=C2D_CONFIG_IMAGE_TAG;]$(cat $C2D_CONFIG_IMAGE_TAG_FILE)"
    echo "##vso[task.setvariable variable=C2D_CONFIG_IMAGE_NAME;]$(cat $C2D_CONFIG_IMAGE_NAME_FILE)"

  timeoutInMinutes: "10"
  displayName: "Docker - build & deploy images with caas2docker wrapper script"

- task: HelmDeploy@0
  displayName: "Helm - install blueprint-test release"
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(IOM_AKS_SERVICE_ENDPOINT)
    namespace: $(IOM_AKS_NAMESPACE)
    releaseName: $(HELM_RELEASE_NAME)
    command: install
    chartType: FilePath
    chartPath: $(IOM_HELM_CHART_PATH)
    waitForExecution: true
    valueFile: order-iom-project-archetype/helm-values-test.yaml
    arguments: >-
      --create-namespace 
      --set image.repository=$(IOM_CI_ACR_HOST)/$(C2D_APP_IMAGE_NAME)
      --set image.tag=$(C2D_APP_IMAGE_TAG)
      --set config.image.repository=$(IOM_CI_ACR_HOST)/$(C2D_CONFIG_IMAGE_NAME)
      --set config.image.tag=$(C2D_CONFIG_IMAGE_TAG)
      --set ingress.hosts[0].host=ipb.$(Build.BuildId).ci 
      --timeout 3600s 

# CLEANUP TASKS
- task: HelmDeploy@0
  displayName: "Cleanup - uninstall blueprint-test release"
  condition: always()
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(IOM_AKS_SERVICE_ENDPOINT)
    namespace: $(IOM_AKS_NAMESPACE)
    command: uninstall
    # NOTE: releaseName parameter doesn't work for uninstall command!
    #releaseName: $(HELM_RELEASE_NAME)
    waitForExecution: true
    valueFile: order-iom-project-archetype/helm-values-test.yaml
    arguments: >-
      --timeout 300s 
      $(HELM_RELEASE_NAME)

- script: |
    echo "##[debug] cleanup IOM and namespace $IOM_AKS_NAMESPACE"
    # wait for pv to disappear before deleting the namespace, otherwise the pv cannot be deleted
    PV=$(kubectl get pv | grep " $IOM_AKS_NAMESPACE/" | { read ID REST; echo $ID; })
    while kubectl get pv | grep -q "$PV"; do
      sleep 10
    done
    kubectl delete namespace "$IOM_AKS_NAMESPACE" || true
  continueOnError: true
  timeoutInMinutes: 5
  displayName: "Cleanup - wait for PV deletion, delete namespace"
  #enabled: false
  condition: eq(variables.AKS_AQUIRED, true)

- task: Kubernetes@1
  displayName: "Cleanup - delete Kubernetes namespace"
  condition: always()
  enabled: false
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: $(IOM_AKS_SERVICE_ENDPOINT)
    command: delete
    arguments: namespace $(IOM_AKS_NAMESPACE)

- task: Maven@3
  condition: and(succeeded(), eq(variables.IS_RELEASE_BUILD, 'true'))
  inputs:
    goals: nexus-staging:release
    mavenPomFile: 'order-iom-project-archetype/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - stage successful release"

- task: Maven@3
  condition: and(succeeded(), eq(variables.IS_RELEASE_BUILD, 'true'))
  inputs:
    goals: org.codehaus.mojo:versions-maven-plugin:2.7:set -DgenerateBackupPoms=false -DnextSnapshot
    mavenPomFile: 'order-iom-project-archetype/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - set next snapshot version"

- script: |
    git config user.email pborchert@intershop.com
    git config user.name "Azure DevOps Build User"
    git add order-iom-project-archetype/pom.xml
    git commit -m "[skip ci] set next snapshot version"
    git push
  displayName: "Git - push changes to pom.xml"
  condition: and(succeeded(), eq(variables.IS_RELEASE_BUILD, 'true'))

- task: Maven@3
  condition: and(failed(), eq(variables.IS_RELEASE_BUILD, 'true'))
  inputs:
    goals: nexus-staging:drop
    mavenPomFile: 'order-iom-project-archetype/pom.xml'
    mavenOptions: '-Xmx1024m $(MAVEN_OPTS)'
  displayName: "Maven - rollback failed release in sonatype nexus"
